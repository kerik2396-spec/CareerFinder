// –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class AuthSystem {
    constructor() {
        this.currentUser = null;
        this.users = JSON.parse(localStorage.getItem('careerFinderUsers')) || [];
        this.init();
    }

    init() {
        this.checkAuthStatus();
        this.setupEventListeners();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
        document.getElementById('loginModal')?.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.login();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        document.getElementById('registerModal')?.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.register();
            }
        });
    }

    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    selectUserType(type) {
        const jobseekerBtn = document.querySelector('[data-type="jobseeker"]');
        const employerBtn = document.querySelector('[data-type="employer"]');
        const jobseekerForm = document.getElementById('jobseekerForm');
        const employerForm = document.getElementById('employerForm');

        jobseekerBtn.classList.toggle('active', type === 'jobseeker');
        employerBtn.classList.toggle('active', type === 'employer');
        jobseekerForm.style.display = type === 'jobseeker' ? 'block' : 'none';
        employerForm.style.display = type === 'employer' ? 'block' : 'none';
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register() {
        const isJobseeker = document.querySelector('[data-type="jobseeker"]').classList.contains('active');
        
        let userData;
        if (isJobseeker) {
            userData = {
                type: 'jobseeker',
                name: document.getElementById('regName').value,
                email: document.getElementById('regEmail').value,
                password: document.getElementById('regPassword').value,
                profession: document.getElementById('regProfession').value,
                skills: document.getElementById('regSkills').value,
                registrationDate: new Date().toISOString()
            };
        } else {
            userData = {
                type: 'employer',
                companyName: document.getElementById('companyName').value,
                email: document.getElementById('companyEmail').value,
                password: document.getElementById('companyPassword').value,
                industry: document.getElementById('companyIndustry').value,
                description: document.getElementById('companyDescription').value,
                registrationDate: new Date().toISOString()
            };
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!userData.email || !userData.password) {
            showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.users.find(u => u.email === userData.email)) {
            showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.users.push(userData);
        localStorage.setItem('careerFinderUsers', JSON.stringify(this.users));

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥
        this.currentUser = userData;
        localStorage.setItem('careerFinderCurrentUser', JSON.stringify(userData));

        showToast(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å${isJobseeker ? '' : ', –∫–æ–º–ø–∞–Ω–∏—è ' + userData.companyName}!`, 'success');
        closeModal('registerModal');
        this.updateUI();
    }

    // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    login() {
        const email = document.getElementById('loginEmail').value;
        const password = document.getElementById('loginPassword').value;

        if (!email || !password) {
            showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        const user = this.users.find(u => u.email === email && u.password === password);
        
        if (user) {
            this.currentUser = user;
            localStorage.setItem('careerFinderCurrentUser', JSON.stringify(user));
            showToast(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º${user.type === 'jobseeker' ? '' : ', ' + user.companyName}!`, 'success');
            closeModal('loginModal');
            this.updateUI();
        } else {
            showToast('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error');
        }
    }

    // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logout() {
        this.currentUser = null;
        localStorage.removeItem('careerFinderCurrentUser');
        showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
        this.updateUI();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    checkAuthStatus() {
        const savedUser = localStorage.getItem('careerFinderCurrentUser');
        if (savedUser) {
            this.currentUser = JSON.parse(savedUser);
            this.updateUI();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        const authControls = document.getElementById('authControls');
        const userMenu = document.getElementById('userMenu');
        const userName = document.getElementById('userName');

        if (this.currentUser) {
            authControls.style.display = 'none';
            userMenu.style.display = 'flex';
            
            if (this.currentUser.type === 'jobseeker') {
                userName.textContent = this.currentUser.name;
            } else {
                userName.textContent = this.currentUser.companyName;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
            this.updateNavigationForEmployer();
        } else {
            authControls.style.display = 'flex';
            userMenu.style.display = 'none';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
    updateNavigationForEmployer() {
        if (this.currentUser?.type === 'employer') {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
            const nav = document.querySelector('nav');
            const employerLink = document.createElement('a');
            employerLink.href = '#';
            employerLink.className = 'nav-link';
            employerLink.textContent = '–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏';
            employerLink.onclick = () => openModal('employerModal');
            nav.appendChild(employerLink);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    requireAuth(action) {
        if (!this.currentUser) {
            showToast('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
            openModal('loginModal');
            return false;
        }
        return true;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
function selectUserType(type) {
    authSystem.selectUserType(type);
}

function register() {
    authSystem.register();
}

function login() {
    authSystem.login();
}

function logout() {
    authSystem.logout();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authSystem = new AuthSystem();

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
function addToFavorites(button) {
    if (!authSystem.requireAuth()) return;
    
    button.textContent = button.textContent.includes('ü§ç') ? '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' : 'ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
    showToast('–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'success');
}

function applyToJob() {
    if (!authSystem.requireAuth()) return;
    
    showToast('–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
    closeModal('applyModal');
}

function postJob() {
    if (!authSystem.requireAuth()) return;
    
    showToast('–í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!', 'success');
    closeModal('employerModal');
}